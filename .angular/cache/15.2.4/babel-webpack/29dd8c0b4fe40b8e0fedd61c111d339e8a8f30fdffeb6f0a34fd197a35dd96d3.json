{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let VariegataPost4Component = /*#__PURE__*/(() => {\n  class VariegataPost4Component {\n    constructor(titleService) {\n      this.titleService = titleService;\n      this.titleService.setTitle(\"Michael Stowe | Project Variegata\");\n    }\n    ngOnInit() {}\n  }\n  VariegataPost4Component.ɵfac = function VariegataPost4Component_Factory(t) {\n    return new (t || VariegataPost4Component)(i0.ɵɵdirectiveInject(i1.Title));\n  };\n  VariegataPost4Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VariegataPost4Component,\n    selectors: [[\"app-variegata-post4\"]],\n    decls: 123,\n    vars: 0,\n    consts: [[1, \"content\"], [1, \"is-bold\"], [1, \"seg\"], [1, \"blog_topic\"], [\"href\", \"https://hadoop.apache.org/\", \"target\", \"_blank\"], [\"href\", \"https://wordnet.princeton.edu/\", \"target\", \"_blank\"], [\"href\", \"https://spacy.io/\", \"target\", \"_blank\"], [\"href\", \"https://www.microsoft.com/en-us/research/project/textworld/\", \"target\", \"_blank\"], [\"href\", \"http://chooseyourstory.com/\", \"target\", \"_blank\"], [\"href\", \"https://networkx.org/\", \"target\", \"_blank\"], [\"alt\", \"story graph\", \"src\", \"../../../assets/img/variegata/variegata_graph.png\"], [1, \"excerpt\"], [\"start\", \"0\", 1, \"code\", 2, \"list-style-type\", \"numeric\"], [\"href\", \"http://eilab.gatech.edu/mark-riedl\", \"target\", \"_blank\"]],\n    template: function VariegataPost4Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"March 3, 2021\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\", 3)(5, \"strong\");\n        i0.ɵɵtext(6, \"Progress So Far\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"p\");\n        i0.ɵɵtext(8, \"The big ideas for this step have been organizing extracted keywords for use in a custom search engine, and creating graphs for story traversal.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"The main technologies used for this step include:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"ul\")(12, \"li\");\n        i0.ɵɵtext(13, \"Python/Flask\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"li\");\n        i0.ɵɵtext(15, \"spaCy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"li\");\n        i0.ɵɵtext(17, \"NetworkX\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"li\");\n        i0.ɵɵtext(19, \"Matplotlib\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"li\");\n        i0.ɵɵtext(21, \"TextWorld\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"li\");\n        i0.ɵɵtext(23, \"Hadoop\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"div\", 2)(25, \"h3\", 3)(26, \"strong\");\n        i0.ɵɵtext(27, \"Keywords\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"p\");\n        i0.ɵɵtext(29, \"In the last post, I discussed some different algorithms for extracting keywords from a piece of text. Moving forward, I have decided to take more of a TF-IDF approach for dealing with keywords. This will allow a more seamless system for searching through cached events based on relevant terms. By doing this, I am creating a simple search engine, using a streamlined version of \");\n        i0.ɵɵelementStart(30, \"a\", 4);\n        i0.ɵɵtext(31, \"Hadoop\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(32, \" for speeding up the backend logic and managing events. While it is a bit more work than the previous approaches I have considered, I expect the TF-IDF approach to make things much easier to manage down the road. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"p\");\n        i0.ɵɵtext(34, \"I am also researching some other techniques for improving searches. Some examples include fuzzy searching for dealing with words that are similarly written (but not quite exact) and vector similarity based on \");\n        i0.ɵɵelementStart(35, \"a\", 5);\n        i0.ɵɵtext(36, \"WordNet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(37, \" to find words with similar meaning. Technologies such as \");\n        i0.ɵɵelementStart(38, \"a\", 6);\n        i0.ɵɵtext(39, \"spaCy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(40, \" have useful tools for tackling these types of problems.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"div\", 2)(42, \"h3\", 3)(43, \"strong\");\n        i0.ɵɵtext(44, \"TextWorld Woes\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(45, \"p\")(46, \"a\", 7);\n        i0.ɵɵtext(47, \"TextWorld\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(48, \" is a tool created by Microsoft for generating text adventure stories specifically for machine learning applications. It sounds perfect! Unfortunately, I have not been able to get the installation to work on my machine. Looking through the issues on their github page, there's others that have had similar problems. After lots of research and troubleshooting, I have still not been able to get it to work properly. I may go back and try some more workarounds, but for now I am just hoping that the creators take notice and release a fix.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(49, \"div\", 2)(50, \"h3\", 3)(51, \"strong\");\n        i0.ɵɵtext(52, \"Manual Story Interaction\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(53, \"p\");\n        i0.ɵɵtext(54, \"I spent some time actually going through some of the stories on \");\n        i0.ɵɵelementStart(55, \"a\", 8);\n        i0.ɵɵtext(56, \"Choose Your Story\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(57, \", this time paying much closer attention to the structure that most of them typically employ. During this, I realized that I have been thinking of these text adventures in a too-specific way. Rather than thinking of these stories as trees, it is better to think of them as more general graphs. This is because doing an action on a given event could very well take the player back to a different event that was previously experienced. Using a tree model, it assumes that the player can only move forward in a story, where they can actually move through the story in a circular fashion depending on how the author designs it.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"p\");\n        i0.ɵɵtext(59, \"In addition to playing through a number of stories and drawing out the paths they offer, I also tried making my own for testing purposes. Using the system on Choose Your Story is a bit cumbersome, but works well enough for its purpose. The website does have some fairly strict rules that a story must adhere to before being published, so it will take a bit more effort before I can actually use it for tests. For example, they have a minimum amount of required pages and words that a story must have, and they require your story to be in the editing phase for at least two days before posting. Because of this, I am continuing to carefully design a story that I know inside and out that will fulfill a good amount of test cases before spending too much time creating one that may not even meet the requirements.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(60, \"div\", 2)(61, \"h3\", 3)(62, \"strong\");\n        i0.ɵɵtext(63, \"Graph Creation\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(64, \"p\");\n        i0.ɵɵtext(65, \"Once I realized a graph model would be a better approach (specifically directed graphs), I sought out tools to generate graphs for visualization and model-related training during the scraping phase. The python library \");\n        i0.ɵɵelementStart(66, \"a\", 9);\n        i0.ɵɵtext(67, \"NetworkX\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(68, \" seems to be a good tool for the job. Rewriting parts of the web scraper and applying the NetworkX functionality, I am able to generate graphs like the following:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(69, \"img\", 10);\n        i0.ɵɵelementStart(70, \"div\", 11)(71, \"ol\", 12)(72, \"li\");\n        i0.ɵɵtext(73, \"Hello, adventurer! It seems that some random village has been beset by that big ol' beastie pictured over there. Cute, isn't he? Of course, being the hero that you are, it's obviously your duty to fight it. So, what are you waiting for? First off, you'll have to select your job. Your job affects what abilities you have.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"li\");\n        i0.ɵɵtext(75, \"Excellent choice! You charge off to beat up the Behemoth...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"li\");\n        i0.ɵɵtext(77, \"Sword in hand, you stand in a ready stance. The Behemoth growls.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(78, \"li\");\n        i0.ɵɵtext(79, \"You attack the Behemoth. It swings a massive claw at you. Ouch.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(80, \"li\");\n        i0.ɵɵtext(81, \"You leap forward, slashing twice at the Behemoth. The Behemoth counters with a mighty blow.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(82, \"li\");\n        i0.ɵɵtext(83, \"Your health is... well... how much health you have. If it drops below zero, it's game over. Don't worry, it's not going to stay at 1. Since different jobs will have different amounts of health, you'll get the rest of your health after you click the link to begin the fight. The variable entitled Behemoth is how much health your foe has. You want this to drop to zero. Mana is required to use certain skills. Once it drops to zero... well, it's not game over, but you won't be able to use some skills. Once again, you'll get the rest of your mana after you begin the fight. Your Drivemeter will raise as you perform actions. Once it reaches ten, you will be able to perform an Overdrive attack. The Overdrive varies with each job.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(84, \"li\");\n        i0.ɵɵtext(85, \"Excellent choice! You charge off to zap, burninate or freeze the Behemoth (depending on your mood)...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(86, \"li\");\n        i0.ɵɵtext(87, \"Staff in hand, you stand in a ready stance. The Behemoth snarls.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(88, \"li\");\n        i0.ɵɵtext(89, \"You cast Fire at the Behemoth. It responds with Thunder.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(90, \"li\");\n        i0.ɵɵtext(91, \"You cast Thunder. Unfortunately, this Behemoth absorbs lightning. So, basically, you've just healed him. It grins infuriatingly at you.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(92, \"li\");\n        i0.ɵɵtext(93, \"You cast Blizzard. Shivering, the Behemoth counters with Thunder.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(94, \"li\");\n        i0.ɵɵtext(95, \"You cast Cure, and restore some of your health.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(96, \"li\");\n        i0.ɵɵtext(97, \"Excellent choice! You charge off to beat up the Behemoth... but not before snatching these items.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(98, \"li\");\n        i0.ɵɵtext(99, \"You stand, daggers at the ready. The Behemoth bares its teeth at you.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(100, \"li\");\n        i0.ɵɵtext(101, \"You examine the Behemoth closely... very closely. You determine that you have approximately a 1 in 3 chance of successfully stealing an item from it, and that using a lightning-based attack will simply heal the monster. You also determine that the Behemoth is allergic to Scan by experience when it lets out a mighty sneeze in your direction. Although it doesn't do that much damage, it's still pretty annoying.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(102, \"li\");\n        i0.ɵɵtext(103, \"You attempt to steal from the Behemoth...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(104, \"li\");\n        i0.ɵɵtext(105, \"Your attempt is unsuccessful. The Behemoth, a wee bit irked at you, casts Thunder.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(106, \"p\");\n        i0.ɵɵtext(107, \"For readability, the labels on the graph nodes correspond to the index of the events in the list. As we can see, there are cases where two events go back and forth between each other and cycles are formed. One thing I am working on is finding a good way to also mark what actions are being made to connect any two events, without making the graph look too cluttered.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(108, \"div\", 2)(109, \"h3\", 3)(110, \"strong\");\n        i0.ɵɵtext(111, \"Further Research\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(112, \"p\");\n        i0.ɵɵtext(113, \"The final topic I would like to touch on is further readings I have come across. After asking around on some machine learning subreddits, I was pointed toward the work of \");\n        i0.ɵɵelementStart(114, \"a\", 13);\n        i0.ɵɵtext(115, \"Mark Riedl\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(116, \". Mr. Riedl has done extensive research on machine learning and AI, and has some publications specifically on story generation. I will be exploring some of his previous work to see if I can get some insight to apply to Project Variegata. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(117, \"div\", 2)(118, \"h3\", 3)(119, \"strong\");\n        i0.ɵɵtext(120, \"Going Forward\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(121, \"p\");\n        i0.ɵɵtext(122, \"Next steps include making more progress on the event search engine, (hopefully) getting TextWorld to work on my system, getting a good testable story posted to Choose Your Story, and getting a better automated and more in-depth system going for creating story graphs. As always, I will be reading more papers and doing plenty of research to try to discover any other techniques that may make everything go smoother.\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\"img[_ngcontent-%COMP%]{display:block;width:50%;margin:50px auto}\"]\n  });\n  return VariegataPost4Component;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}