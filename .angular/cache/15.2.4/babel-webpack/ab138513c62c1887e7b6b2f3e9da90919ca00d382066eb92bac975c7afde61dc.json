{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let VariegataPost2Component = /*#__PURE__*/(() => {\n  class VariegataPost2Component {\n    constructor(titleService) {\n      this.titleService = titleService;\n      this.titleService.setTitle(\"Michael Stowe | Project Variegata\");\n    }\n    ngOnInit() {}\n  }\n  VariegataPost2Component.ɵfac = function VariegataPost2Component_Factory(t) {\n    return new (t || VariegataPost2Component)(i0.ɵɵdirectiveInject(i1.Title));\n  };\n  VariegataPost2Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VariegataPost2Component,\n    selectors: [[\"app-variegata-post2\"]],\n    decls: 136,\n    vars: 0,\n    consts: [[1, \"content\"], [1, \"is-bold\"], [1, \"seg\"], [1, \"blog_topic\"], [1, \"excerpt\"], [1, \"code\"], [\"href\", \"https://www.kaggle.com/Cornell-University/movie-dialog-corpus\", \"target\", \"_blank\"], [\"href\", \"https://www.kaggle.com/leangab/poe-short-stories-corpuscsv\", \"target\", \"_blank\"], [\"href\", \"https://www.kaggle.com/jannesklaas/scifi-stories-text-corpus\", \"target\", \"_blank\"], [\"href\", \"https://www.kaggle.com/jrobischon/wikipedia-movie-plots\", \"target\", \"_blank\"], [\"href\", \"http://chooseyourstory.com/\", \"target\", \"_blank\"], [\"href\", \"https://play.aidungeon.io/main/landing\", \"target\", \"_blank\"], [\"href\", \"https://pypi.org/project/json2html/\", \"target\", \"_blank\"], [\"href\", \"https://www.selenium.dev/\", \"target\", \"_blank\"], [\"href\", \"../../../assets/static-pages/variegata-example1.html\", \"target\", \"_blank\"]],\n    template: function VariegataPost2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"February 10, 2021\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\", 3)(5, \"strong\");\n        i0.ɵɵtext(6, \"Progress So Far\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"p\");\n        i0.ɵɵtext(8, \"Up to this point, I have begun to read through more research and source code for similar projects. Additionally, I have started building a Flask app to make working with all of the components more manageable, gathering data, exploring story generation techniques, and spending lots of time on setup and debugging.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"The main technologies I have used so far include:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"ul\")(12, \"li\");\n        i0.ɵɵtext(13, \"Python/Flask\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"li\");\n        i0.ɵɵtext(15, \"Selenium\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"li\");\n        i0.ɵɵtext(17, \"json2html\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"li\");\n        i0.ɵɵtext(19, \"SQLAlchemy/SQLite\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"p\");\n        i0.ɵɵtext(21, \"(More information on the roles of these technologies below)\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\", 2)(23, \"h3\", 3)(24, \"strong\");\n        i0.ɵɵtext(25, \"Story Generation\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"p\");\n        i0.ɵɵtext(27, \"For the first development stage, I experimented with some fairly simple story generation techniques to test the waters. A very basic way to generate a story programmatically is to define a list containing each event in the plot. We can then simply pick random events from this list and chain them together to create a plot.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 4)(29, \"p\");\n        i0.ɵɵtext(30, \"Input:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"ul\", 5)(32, \"li\");\n        i0.ɵɵtext(33, \"[ 'The dog barked',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"li\");\n        i0.ɵɵtext(35, \"'The dog learned how to read',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"li\");\n        i0.ɵɵtext(37, \"'The dog put on a hat',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"li\");\n        i0.ɵɵtext(39, \"'The dog ran through the forest',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"li\");\n        i0.ɵɵtext(41, \"'The dog ate a shoe',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"li\");\n        i0.ɵɵtext(43, \"'The dog met a cat',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"li\");\n        i0.ɵɵtext(45, \"'The dog chased a squirrel',\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"li\");\n        i0.ɵɵtext(47, \"'The dog recited act 3, scene 1 of Shakespeare's Hamlet' ]\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(48, \"p\");\n        i0.ɵɵtext(49, \"Output:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"p\")(51, \"em\");\n        i0.ɵɵtext(52, \"The dog barked. The dog recited act 3, scene 1 of Shakespeare's Hamlet. The dog put on a hat. The dog chased a squirrel. The dog ate a shoe.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(53, \"p\");\n        i0.ɵɵtext(54, \"Obviously, this technique of story generation is not the most sophisticated. As expected, the results of this approach give very messy stories that are not too great to read, and it relies heavily on the quality of the initial events. It works as a starting point, but there's plenty we can do to improve. One such improvement could be separating the individual pieces of information to be chained together. If we want to choose a random character, time period, activity, etc., we can define possibilities for each part and randomly choose every aspect of the event, rather than an entire predefined event as a whole.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"div\", 4)(56, \"p\");\n        i0.ɵɵtext(57, \"Input:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"ul\", 5)(59, \"li\");\n        i0.ɵɵtext(60, \"when = ['A few years ago', 'Yesterday', 'Last night', 'A long time ago', 'In 400 B.C.', 'Once upon a time']\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(61, \"li\");\n        i0.ɵɵtext(62, \"who = ['a dog', 'a rabbit', 'an elephant', 'a mouse', 'a turtle', 'a child']\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(63, \"li\");\n        i0.ɵɵtext(64, \"name = ['Billy', 'Chip Rockets', 'Austin', 'Mason', 'Sophie', 'Lydia']\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"li\");\n        i0.ɵɵtext(66, \"residence = ['Michigan', 'Germany', 'Neptune', 'the ocean', 'Amazon Headquarters']\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(67, \"li\");\n        i0.ɵɵtext(68, \"went = ['bed', 'school', 'work', 'the farm']\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(69, \"li\");\n        i0.ɵɵtext(70, \"happened = ['forgot their own name', 'slept', 'solved a mystery', 'wrote a book']\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(71, \"p\");\n        i0.ɵɵtext(72, \"Output:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(73, \"p\")(74, \"em\");\n        i0.ɵɵtext(75, \"In 400 B.C., a rabbit named Chip Rockets that lived in the ocean went to school and solved a mystery.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(76, \"p\");\n        i0.ɵɵtext(77, \"As we can see, this small update generated a sentence that is (in my opinion) much more varied and interesting. Again, though, the quality of the output is completely dictated by the quality of the input . The goal is to use virtually no hard-coded values, and to automatically produce cohesive stories on the fly. That's where machine learning will come in! As I continue to research and experiment, I will hopefully find certain machine learning techniques that will intelligently combine a large corpus of events into much better stories.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(78, \"div\", 2)(79, \"h3\", 3)(80, \"strong\");\n        i0.ɵɵtext(81, \"Gathering Content\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(82, \"p\");\n        i0.ɵɵtext(83, \"In order to generate good stories, we need examples of good stories to begin with. In this context, a \\\"good\\\" story is not necessarily one that is expertly written. It simply is one that has a cohesive plot for a reader to follow. I plan on gathering two types of stories for two different tasks. For training a model, we need plenty of stories and some corresponding tags. I have found a few datasets that seem promising:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(84, \"ul\")(85, \"li\")(86, \"a\", 6);\n        i0.ɵɵtext(87, \"Movie Dialogue Corpus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(88, \" - Over 300,000 lines of dialogue from over 600 movies\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"li\")(90, \"a\", 7);\n        i0.ɵɵtext(91, \"E.A. Poe's corpus of short stories\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(92, \" - Collection of entire short stories from Edgar Allen Poe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(93, \"li\")(94, \"a\", 8);\n        i0.ɵɵtext(95, \"SciFi Stories Text Corpus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(96, \" - Collection of SciFi stories\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(97, \"li\")(98, \"a\", 9);\n        i0.ɵɵtext(99, \"Wikipedia Movie Plots\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(100, \" - Wikipedia movie plot summaries for nearly 35,000 movies\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(101, \"li\");\n        i0.ɵɵtext(102, \"More to come later!\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(103, \"p\");\n        i0.ɵɵtext(104, \"Each of these datasets include the genre of the source, and some include keywords to further classify each text. This information will be very useful when it comes to training so that similar events can be grouped together by keyword. For example, if the current event in a story has to do with zombies and chainsaws, there's a good chance the model will want to pull the next event from a group that's classified as horror.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(105, \"p\");\n        i0.ɵɵtext(106, \"An additional source will be choose your own adventure stories. These are unique in that the plot is not linear like traditional stories. The (tentative) end goal of Project Variegata is essentially to generate these types of stories on the fly, so what better place to look that ones that have already been crafted! An excellent source of choose your own adventures is \");\n        i0.ɵɵelementStart(107, \"a\", 10);\n        i0.ɵɵtext(108, \"Choose Your Story\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(109, \". This site consists of user-submitted stories of numerous genres that are voted on by the community based on difficulty, length, maturity, and overall quality. I spent some time perusing the source code for \");\n        i0.ɵɵelementStart(110, \"a\", 11);\n        i0.ɵɵtext(111, \"AI Dungeon\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(112, \" (a project with similar goals to this one but focusing more on text generation rather than structure), and I discovered that they also use Choose Your Story as a source for their model.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(113, \"p\");\n        i0.ɵɵtext(114, \"Using a modified version of AI Dungeon's web scraper and the package \");\n        i0.ɵɵelementStart(115, \"a\", 12);\n        i0.ɵɵtext(116, \"json2html\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(117, \", I am able to use \");\n        i0.ɵɵelementStart(118, \"a\", 13);\n        i0.ɵɵtext(119, \"Selenium\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(120, \" to navigate through one of the choose your own adventure stories, save it as a json file, and convert it into a tree-like HTML table (\");\n        i0.ɵɵelementStart(121, \"a\", 14);\n        i0.ɵɵtext(122, \"example here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(123, \"). This visual representation of the tree structure will be great for testing purposes to see what paths the algorithm is taking and for what reasons, in addition to using the tree for further model training.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(124, \"div\", 2)(125, \"h3\", 3)(126, \"strong\");\n        i0.ɵɵtext(127, \"Going Forward\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(128, \"p\");\n        i0.ɵɵtext(129, \"From this point, the key focus is getting the basic machine learning aspect set up so that I can begin experimenting with various techniques and algorithms. TensorFlow and spaCy will probably a couple of the most useful tools for this part.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(130, \"p\");\n        i0.ɵɵtext(131, \"While I have set up some database management for more efficiently managing all of the events to be gathered (using SQLAlchemy and SQLite), there is still more to do before it can be useful in this project. I also plan on using Python's multiprocessing library and/or Hadoop to collect numerous stories from the web in parallel, as it can take a while for Selenium to go through all of the pages - especially for stories with thousands of branches.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(132, \"p\");\n        i0.ɵɵtext(133, \"Lower on the list is to improve the tree visualization for the stories to make them easier to read and navigate.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(134, \"p\");\n        i0.ɵɵtext(135, \"Stay tuned for more!\");\n        i0.ɵɵelementEnd()()();\n      }\n    }\n  });\n  return VariegataPost2Component;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}