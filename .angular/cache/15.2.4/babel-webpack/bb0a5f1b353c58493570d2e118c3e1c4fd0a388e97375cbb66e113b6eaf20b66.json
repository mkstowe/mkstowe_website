{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let VariegataPost9Component = /*#__PURE__*/(() => {\n  class VariegataPost9Component {\n    constructor(titleService) {\n      this.titleService = titleService;\n      this.titleService.setTitle(\"Michael Stowe | Project Variegata\");\n    }\n    ngOnInit() {}\n  }\n  VariegataPost9Component.ɵfac = function VariegataPost9Component_Factory(t) {\n    return new (t || VariegataPost9Component)(i0.ɵɵdirectiveInject(i1.Title));\n  };\n  VariegataPost9Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VariegataPost9Component,\n    selectors: [[\"app-variegata-post9\"]],\n    decls: 43,\n    vars: 0,\n    consts: [[1, \"content\"], [1, \"is-bold\"], [1, \"seg\"], [1, \"blog_topic\"], [\"href\", \"../../../assets/static-pages/variegata-example4.html\", \"target\", \"_blank\"], [\"href\", \"../../../assets/static-pages/variegata-example5.html\", \"target\", \"_blank\"]],\n    template: function VariegataPost9Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"April 7, 2021\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\", 3)(5, \"strong\");\n        i0.ɵɵtext(6, \"Granular Text\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"p\");\n        i0.ɵɵtext(8, \"As we could see from previous iterations, the generated stories are not very good, largely due to he events being very disjointed. The first step I took to try to improve this was to make the text much more granular. Rather than lumping entire events in the form of paragraphs together as the transitions, I broke each event down into individual sentences. This would allow the events generated to be a lot more specific to the overall story, rather than just having a couple of commonalities.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"An example of generated text with smaller pieces of source text can be seen \");\n        i0.ɵɵelementStart(11, \"a\", 4);\n        i0.ɵɵtext(12, \"here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \".\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15, \"Whether or not that's an improvement is up to the reader. I personally thing it reads almost like a poem.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 2)(17, \"h3\", 3)(18, \"strong\");\n        i0.ɵɵtext(19, \"Playing with Data\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"p\");\n        i0.ɵɵtext(21, \"The next step was to try out different types of source text. Up until now, I have primarily been using the same pool of stories pulled from Choose Your Adventure. The downside to this is that there is not really any set grouping to those stories. They can be any genre, and deal with any topic. This can make it difficult to find acceptable ways to connect events across stories. To combat this, I tried using more specific source text to feed to the model. The first of which was a collection of Edgar Allen Poe's stories and poems.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"p\");\n        i0.ɵɵtext(23, \"A story generated from Poe's works can be seen \");\n        i0.ɵɵelementStart(24, \"a\", 5);\n        i0.ɵɵtext(25, \"here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(26, \".\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"p\");\n        i0.ɵɵtext(28, \"While still being fairly disjointed like before, using text entirely from a single author definitely makes the story feel a bit more comprehensive. All of the events generated are written in a similar style to each other, making them feel like they belong together - even if the actual content does not make a ton of sense when read out of context.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"p\");\n        i0.ɵɵtext(30, \"There are a number of other data sets I am working on trying out to see how they compare, including wine reviews and news articles. These, however, are incredibly large compared to what I have already tried out, so the models are taking an extremely long time to be created. The model for the news articles is still being made as I write this. I may have to trim down the amount of data being processed if it does not end up working, but either way I will be trying out these different source texts.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"div\", 2)(32, \"h3\", 3)(33, \"strong\");\n        i0.ɵɵtext(34, \"WolverineSoft Presentation\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(35, \"p\");\n        i0.ɵɵtext(36, \"I have been asked to present my work so far on this project to WolverineSoft - the University of Michigan's video game design club. I have been preparing this presentation over the past few days and updating it with the up-to-date experiments. I plan on posting the slides here later this week, so stay tuned!\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 2)(38, \"h3\", 3)(39, \"strong\");\n        i0.ɵɵtext(40, \"Moving Forward\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"p\");\n        i0.ɵɵtext(42, \"While I am happy to see that using a more niche source text improves the overall \\\"feel\\\" of the generated stories, I still want to make them work better. Over the next week, I plan on continuing to figure out ways to tweak the model and generator to make these stories feel more natural.\");\n        i0.ɵɵelementEnd()()();\n      }\n    }\n  });\n  return VariegataPost9Component;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}