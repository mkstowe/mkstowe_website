{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"@angular/router\";\nexport let ProjectsPageComponent = /*#__PURE__*/(() => {\n  class ProjectsPageComponent {\n    constructor(titleService) {\n      this.titleService = titleService;\n      this.titleService.setTitle(\"Michael Stowe | Projects\");\n    }\n    ngOnInit() {}\n  }\n  ProjectsPageComponent.ɵfac = function ProjectsPageComponent_Factory(t) {\n    return new (t || ProjectsPageComponent)(i0.ɵɵdirectiveInject(i1.Title));\n  };\n  ProjectsPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProjectsPageComponent,\n    selectors: [[\"app-projects-page\"]],\n    decls: 153,\n    vars: 0,\n    consts: [[1, \"content\"], [1, \"section-header\", \"is-bold\", \"is-uppercase\"], [1, \"seg\"], [1, \"is-bold\"], [1, \"project-content\"], [1, \"project-img\"], [\"src\", \"https://www.youtube.com/embed/dSoptkDNyNI\", \"frameborder\", \"0\", \"allow\", \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\", \"allowfullscreen\", \"\"], [1, \"project-description\"], [\"href\", \"https://connectourkids.org/tools/\", \"target\", \"_blank\"], [\"src\", \"../../assets/img/caduceus.png\", \"alt\", \"Caduceus cover art\", 1, \"media_left\"], [\"routerLink\", \"cloud\"], [\"routerLink\", \"variegata\"], [\"src\", \"https://www.youtube.com/embed/2Z_BOzeCNvE\", \"frameborder\", \"0\", \"allow\", \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\", \"allowfullscreen\", \"\"], [\"href\", \"https://sbtgsstudios.itch.io/mission-o-possumble\", \"target\", \"_blank\"], [\"src\", \"../../assets/img/metroid.gif\", \"alt\", \"Metroid\"]],\n    template: function ProjectsPageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Projects\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"h4\", 3);\n        i0.ɵɵtext(5, \"Family Connections and People Search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"h5\");\n        i0.ɵɵtext(7, \"Angular, Node.js, PostgreSQL, GraphQL, TypeORM\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 4)(9, \"div\", 5);\n        i0.ɵɵelement(10, \"iframe\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 7)(12, \"p\");\n        i0.ɵɵtext(13, \" Family Connections is a web app utilized primarily by social workers who are dedicated to finding permanent homes for children in foster care. The app allows the workers to create family trees for the children and keep track of their interactions with their relatives. Using Angular, I help to create a sophisticated and modern user interface that provides users with the necessary tools to accomplish these tasks. On the backend, I use GraphQL and TypeORM to manage a database of each social worker's teams, cases, engagements with relatives, their tasks, audit logs, and much more. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15, \" People Search is a standalone app that has an integration right in Family Connections. It allows the user to enter known information about a relative of the child and run a search to find any matches, as well as find other potential relatives that are associated. The integration with Family Connections gives the user the convenience of performing these searches on people already in the family tree, and import new connections with the click of a button. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\");\n        i0.ɵɵtext(17, \" Read more about these tools on the \");\n        i0.ɵɵelementStart(18, \"a\", 8);\n        i0.ɵɵtext(19, \"Connect Our Kids website\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \". \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(21, \"div\", 2)(22, \"h4\", 3);\n        i0.ɵɵtext(23, \"Caduceus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"h5\");\n        i0.ɵɵtext(25, \"C#, Unity\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 4)(27, \"div\", 5);\n        i0.ɵɵelement(28, \"img\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 7)(30, \"p\");\n        i0.ɵɵtext(31, \" Larger-scale indie video game project produced by WolverineSoft Studios at the University of Michigan. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"p\");\n        i0.ɵɵtext(33, \" Read more about my contributions on my \");\n        i0.ɵɵelementStart(34, \"a\", 10);\n        i0.ɵɵtext(35, \"Project Cloud blog\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(36, \". \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(37, \"div\", 2)(38, \"h4\", 3);\n        i0.ɵɵtext(39, \"Project Variegata\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"h5\");\n        i0.ɵɵtext(41, \"Python, Flask\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 4)(43, \"div\", 7)(44, \"p\");\n        i0.ɵɵtext(45, \" Independent research project conducted under the guidance of Austin Yarger. The goal is to explore how machine learning can be used to create unique stories and narratives in a video game by automatically structuring a tree of relevant events based on what is currently happening to the player. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"p\");\n        i0.ɵɵtext(47, \" Read more and get updates on my \");\n        i0.ɵɵelementStart(48, \"a\", 11);\n        i0.ɵɵtext(49, \"Project Variegata blog\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(50, \". \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(51, \"div\", 2)(52, \"h4\", 3);\n        i0.ɵɵtext(53, \"Mission O-Possumble\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"h5\");\n        i0.ɵɵtext(55, \"C#, Unity\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"div\", 4)(57, \"div\", 5);\n        i0.ɵɵelement(58, \"iframe\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(59, \"div\", 7)(60, \"p\");\n        i0.ɵɵtext(61, \" An original game made from scratch in Unity with a team of three other students. Using an Agile workflow over the course of about seven weeks, we made all original assets and art to make a unique and challenging game that ended up winning second place in the Umich and EMU showcase at the end of the semester. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"p\");\n        i0.ɵɵtext(63, \" See more about Mission O-Possumble and download for free at our \");\n        i0.ɵɵelementStart(64, \"a\", 13);\n        i0.ɵɵtext(65, \"itch.io page!\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(66, \"div\", 2)(67, \"h4\", 3);\n        i0.ɵɵtext(68, \"Timber\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(69, \"h5\");\n        i0.ɵɵtext(70, \"C#, Unity\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(71, \"div\", 4)(72, \"div\", 7)(73, \"p\");\n        i0.ɵɵtext(74, \"An original game made as a two-week rapid prototype.\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(75, \"div\", 2)(76, \"h4\", 3);\n        i0.ɵɵtext(77, \"Metroid Remake\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(78, \"h5\");\n        i0.ɵɵtext(79, \"C#, Unity\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(80, \"div\", 4)(81, \"div\", 5);\n        i0.ɵɵelement(82, \"img\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(83, \"div\", 7)(84, \"p\");\n        i0.ɵɵtext(85, \" A remake of the first stage of the 1986 NES game Metroid. Made with one teammate as an introduction to game development. \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(86, \"div\", 2)(87, \"h4\", 3);\n        i0.ɵɵtext(88, \"Search Engine\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"h5\");\n        i0.ɵɵtext(90, \"Python/Flask, Bash\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(91, \"div\", 4)(92, \"div\", 7)(93, \"p\");\n        i0.ɵɵtext(94, \" An end-to-end search engine built mainly in Python utilizing a MapReduce pipeline to construct an inverted index from Wikipedia articles, along with a REST API and Flask app to create a user interface. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(95, \"p\");\n        i0.ɵɵtext(96, \"Concepts learned:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(97, \"ul\")(98, \"li\");\n        i0.ɵɵtext(99, \"Parallel data processing with MapReduce.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(100, \"li\");\n        i0.ɵɵtext(101, \"Information retrieval based on tf-idf and PageRank scores\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(102, \"div\", 2)(103, \"h4\", 3);\n        i0.ɵɵtext(104, \"Instagram Clone\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(105, \"h5\");\n        i0.ɵɵtext(106, \"Python/Flask, JavaScript/React, HTML/CSS, SQL, AJAX, REST\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(107, \"div\", 4)(108, \"div\", 7)(109, \"p\");\n        i0.ɵɵtext(110, \"A fully user-interactive Instagram clone.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(111, \"p\");\n        i0.ɵɵtext(112, \"Concepts learned:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(113, \"ul\")(114, \"li\");\n        i0.ɵɵtext(115, \"Templating sites through Jinja with a Flask app.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(116, \"li\");\n        i0.ɵɵtext(117, \"Server-side and client-side dynamic concepts\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(118, \"li\");\n        i0.ɵɵtext(119, \"Asynchronous programming with AJAX.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(120, \"li\");\n        i0.ɵɵtext(121, \"REST APIs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(122, \"li\");\n        i0.ɵɵtext(123, \" Using JavaScript (specifically React) for creating a better user experience. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(124, \"li\");\n        i0.ɵɵtext(125, \"Scaling a site and deploying to AWS.\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(126, \"div\", 2)(127, \"h4\", 3);\n        i0.ɵɵtext(128, \"SAD Detection\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(129, \"h5\");\n        i0.ɵɵtext(130, \"Python\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(131, \"div\", 4)(132, \"div\", 7)(133, \"p\");\n        i0.ɵɵtext(134, \" A machine learning-oriented Python program that scans and analyzes Twitter users' tweets to find trends in sentiment to predict the possibility of time-based emotional disorders such as Seasonal Affective Disorder (SAD) or Bipolar Disorder. \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(135, \"div\", 2)(136, \"h4\", 3);\n        i0.ɵɵtext(137, \"LC2K\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(138, \"h5\");\n        i0.ɵɵtext(139, \"C, Assembly\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(140, \"div\", 4)(141, \"div\", 7)(142, \"p\");\n        i0.ɵɵtext(143, \" A simulation of the Little Computer 2000 (LC2K) written in C. This simulated computer included an assembler to convert assembly code for a custom ISA to machine code, single cycle, multi cycle, and pipelined processors, a linker, and a cache system. \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(144, \"div\", 2)(145, \"h4\", 3);\n        i0.ɵɵtext(146, \"theCurlyBot\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(147, \"h5\");\n        i0.ɵɵtext(148, \"Python\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(149, \"div\", 4)(150, \"div\", 7)(151, \"p\");\n        i0.ɵɵtext(152, \" A reddit bot - called theCurlyBot - that I created with a small team using Python. Our bot pulls fake news headlines from the subreddit /r/TheOnion, and real (but fake-sounding) headlines from /r/NotTheOnion. It then runs a natural language processing algorithm on the pool of headlines that it continually collects, and makes its own fake news headlines that it then posts to its own subreddit. \");\n        i0.ɵɵelementEnd()()()()();\n      }\n    },\n    dependencies: [i2.RouterLink],\n    styles: [\".project-content[_ngcontent-%COMP%]{margin-top:40px;display:flex;gap:40px}.project-description[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:first-child{margin-top:0}.project-description[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:last-child{margin-bottom:0}img[_ngcontent-%COMP%], iframe[_ngcontent-%COMP%]{max-width:450px;max-height:350px}iframe[_ngcontent-%COMP%]{width:450px;height:260px}@media screen and (max-width: 1500px){.project-content[_ngcontent-%COMP%]{display:block}.project-img[_ngcontent-%COMP%]{width:60%;margin:0 auto 30px}img[_ngcontent-%COMP%], iframe[_ngcontent-%COMP%]{width:100%;max-width:500px}iframe[_ngcontent-%COMP%]{height:300px}}@media screen and (max-width: 750px){.project-img[_ngcontent-%COMP%]{width:80%}}@media screen and (max-width: 550px){.project-img[_ngcontent-%COMP%]{width:100%}}\"]\n  });\n  return ProjectsPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}