{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport let PreAlphaIComponent = /*#__PURE__*/(() => {\n  class PreAlphaIComponent {\n    constructor(titleService) {\n      this.titleService = titleService;\n      this.titleService.setTitle(\"Michael Stowe | Project Cloud\");\n    }\n    ngOnInit() {}\n  }\n  PreAlphaIComponent.ɵfac = function PreAlphaIComponent_Factory(t) {\n    return new (t || PreAlphaIComponent)(i0.ɵɵdirectiveInject(i1.Title));\n  };\n  PreAlphaIComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PreAlphaIComponent,\n    selectors: [[\"app-pre-alpha-i\"]],\n    decls: 52,\n    vars: 0,\n    consts: [[1, \"content\"], [1, \"is-bold\"], [1, \"seg\"], [1, \"blog_topic\"], [\"autoplay\", \"\", \"controls\", \"\", \"loop\", \"\", \"muted\", \"\", \"oncanplay\", \"this.play()\", \"onloadedmetadata\", \"this.muted = true\"], [\"src\", \"../../../../assets/img/cloud/melee.mp4\", \"type\", \"video/mp4\"], [\"src\", \"../../../../assets/img/cloud/melee_to_air.mp4\", \"type\", \"video/mp4\"], [\"src\", \"../../../../assets/img/cloud/melee_vfx.gif\"], [\"src\", \"../../../../assets/img/cloud/glide.mp4\", \"type\", \"video/mp4\"]],\n    template: function PreAlphaIComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Pre-Alpha\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"h3\", 3)(5, \"strong\");\n        i0.ɵɵtext(6, \"Getting Familiar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"p\");\n        i0.ɵɵtext(8, \"Before I could get working on my assigned tasks for the pre-alpha sprint, I had to get familiar with the existing code base. A working prototype of the project had already been created prior to my involvement, so I spent some time reading through what my teammates had already written to ensure I had a good idea of what was going on. Getting used to the code base and becoming acquainted with the preferred style and coding paradigms is essential when joining any project and making sure things go smoothly.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"In addition to reading the code, I also spent time looking through Confluence and Jira to read in more detail the things that were discussed during the weekly meetings. I read through the design documents, taking note of how I figured would be the best way to approach the programming aspect of the different features to be implemented.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 2)(12, \"h3\", 3)(13, \"strong\");\n        i0.ɵɵtext(14, \"Operating System Woes\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"p\");\n        i0.ɵɵtext(16, \"When it comes to programming, I am very much a fan of Linux over Windows. With that, however, comes some compatibility issues. I unfortunately had to spend a lot of time figuring out how to get Unity to work with my system. Once I finally got it Unity installed everything seemed a-okay! But as soon as I launched the game for the first time, everything broke and I had no choice but to wallow in self pity. I ended up just reinstalling Windows and dealing with it.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 2)(18, \"h3\", 3)(19, \"strong\");\n        i0.ɵɵtext(20, \"Quick Melee\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"p\");\n        i0.ɵɵtext(22, \"The first task I worked on was the quick melee mechanic. This task took a bit longer than anticipated, largely due to the fact that I wanted to pay extra close attention to making sure my code adhered to the style guides of the studio.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"p\");\n        i0.ɵɵtext(24, \"This task consisted of implementing a quick melee attack for the player character. The main inspiration for this mechanic is Lucio's \\\"boop\\\" attack from Overwatch. Essentially when activating the quick melee, the character emits a short-ranged burst of force in front of them. Any enemies within its range will take damage and be knocked back. The mechanic has an adjustable damage, range, knockback strength, and cooldown period that will later be adjusted to be balanced once we being doing more playtests.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"video\", 4);\n        i0.ɵɵelement(26, \"source\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 2)(28, \"h3\", 3)(29, \"strong\");\n        i0.ɵɵtext(30, \"Melee to Air\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"p\");\n        i0.ɵɵtext(32, \"Next up was to add the \\\"melee to air\\\" mechanic to the quick melee. This is basically where, if the player successfully melees an enemy while the player is in the air, they are launched vertically upward around 3-4x their normal jump height. This can be used as a platforming mechanic to get to some hard-to-reach areas that normal jumping would not be good enough for.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"p\");\n        i0.ɵɵtext(34, \"The main issue I ran in to during this implementation was being able to accurately determine if the player is grounded. When diving into the code and using lots of logging and temporary variables for debugging, I determined that there was some odd behavior going on in the existing movement system. This bugginess prevents normal grounded checking to sometimes fail, meaning that it is very difficult to tell whether or not the player is in the air at any given time. This problem will likely be fixed for next sprint once we revamp some aspects of the movement system.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"video\", 4);\n        i0.ɵɵelement(36, \"source\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 2)(38, \"h3\", 3)(39, \"strong\");\n        i0.ɵɵtext(40, \"Melee VFX\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"p\");\n        i0.ɵɵtext(42, \"The next step was to incorporate the visual effects that one of the talented individuals on the VFX team implemented. Overall, this was a pretty simple process. There was one issue where the camera didn't properly render the particle effects used for the effect when in some orientations, but the VFX artist was able to fix it pretty easily.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(43, \"img\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"div\", 2)(45, \"h3\", 3)(46, \"strong\");\n        i0.ɵɵtext(47, \"Glide\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(48, \"p\");\n        i0.ɵɵtext(49, \"The final task I worked on this sprint was the glide. This is where when the player is falling, they can hold the jump key to glide through the air, falling to the ground at a slower rate. Like melee to air, this mechanic will probably need to be updated once the movement system is updated, but for now it is working as intended with an adjustable glide duration and fall rate.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"video\", 4);\n        i0.ɵɵelement(51, \"source\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\"img[_ngcontent-%COMP%]{display:block;width:50%;margin:0 auto}@media screen and (max-width: 950px){img[_ngcontent-%COMP%]{width:100%}video[_ngcontent-%COMP%]{width:100%}}\"]\n  });\n  return PreAlphaIComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}